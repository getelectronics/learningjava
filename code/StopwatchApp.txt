import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class StopwatchApp extends JFrame {

    private JLabel timeLabel;
    private JButton startButton, stopButton, resetButton;
    private Timer timer;
    private long startTime;
    private long elapsedTime = 0;  // Tracks the total elapsed time

    // Constructor to set up the GUI
    public StopwatchApp() {
        setTitle("Stopwatch");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);  // Center the window on the screen

        // Initialize components
        timeLabel = new JLabel("00:00:000", SwingConstants.CENTER);
        timeLabel.setFont(new Font("Serif", Font.BOLD, 36));

        startButton = new JButton("Start");
        stopButton = new JButton("Stop");
        resetButton = new JButton("Reset");

        // Disable stop and reset buttons initially
        stopButton.setEnabled(false);
        resetButton.setEnabled(false);

        // Set up the layout
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(startButton);
        buttonPanel.add(stopButton);
        buttonPanel.add(resetButton);

        setLayout(new BorderLayout());
        add(timeLabel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        // Timer to update the stopwatch every millisecond
        timer = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                elapsedTime = System.currentTimeMillis() - startTime;
                updateDisplay();
            }
        });

        // Add action listeners to the buttons
        startButton.addActionListener(new StartButtonListener());
        stopButton.addActionListener(new StopButtonListener());
        resetButton.addActionListener(new ResetButtonListener());

        setVisible(true);
    }

    // Method to update the time display
    private void updateDisplay() {
        long seconds = (elapsedTime / 1000) % 60;
        long minutes = (elapsedTime / (1000 * 60)) % 60;
        long milliseconds = elapsedTime % 1000;
        timeLabel.setText(String.format("%02d:%02d:%03d", minutes, seconds, milliseconds));
    }

    // Action listener for the Start button
    private class StartButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            startTime = System.currentTimeMillis() - elapsedTime;  // Adjust for any existing elapsed time
            timer.start();  // Start the timer
            startButton.setEnabled(false);  // Disable the start button
            stopButton.setEnabled(true);  // Enable the stop button
            resetButton.setEnabled(false);  // Disable the reset button
        }
    }

    // Action listener for the Stop button
    private class StopButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            timer.stop();  // Stop the timer
            startButton.setEnabled(true);  // Enable the start button
            stopButton.setEnabled(false);  // Disable the stop button
            resetButton.setEnabled(true);  // Enable the reset button
        }
    }

    // Action listener for the Reset button
    private class ResetButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            timer.stop();  // Stop the timer
            elapsedTime = 0;  // Reset elapsed time
            updateDisplay();  // Update the display to show "00:00:000"
            startButton.setEnabled(true);  // Enable the start button
            stopButton.setEnabled(false);  // Disable the stop button
            resetButton.setEnabled(false);  // Disable the reset button
        }
    }

    // Main method to run the app
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new StopwatchApp());
    }
}